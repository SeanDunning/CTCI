void mergeSort(int * arr) {
    int * tempArr;
    mergeSort(arr, tempArr, 0, arr.length() - 1);
}

void mergeSort (int * arr, int * tempArr, int low, int high) {
  
  if (low < high) {
    int median = (low + high) / 2;
    mergeSort(arr, tempArr, low, median);     //left subArray
    mergeSort(arr, tempArr, median + 1, high);    //right subArray
    merge (arr, tempArr, low, median, high)    //merge two sorted subArrays
  }    
} 

//Merge two sub arrays into original array sorted using temp array

void merge(int * arr, int * tempArr, int low, int median, int high) {
    
  for (int i = low; i <= high; i++) {
     tempArr[i] = arr[i];    
  }

  int tempLeft = low;
  int tempRight = median + 1;
  int current = low;

  while (tempLeft <= median && tempRight <= high) {
    if (tempArr[tempLeft] < tempArr[tempRight]) {
        arr[current] = tempArr[tempLeft];
        tempLeft++;
    } else {
        arr[current] = tempArr[tempRight];
        tempRight++;
  }
  current++;
}    

int remaining = median - tempLeft;

for (int i = 0; i <= remaining; i++) 
    arr[current + i] = tempArr[tempLeft + i];
}
